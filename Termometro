#include <stdio.h>
#include "pico/stdlib.h"
#include "hardware/spi.h"
#include "hardware/adc.h"
#include "hardware/i2c.h"
#include "pico/binary_info.h"
#include "ssd1306.h" // Biblioteca do display OLED

// Definir pinos para SPI e I2C
#define SPI_PORT spi0
#define PIN_MISO 16
#define PIN_CS   17
#define PIN_SCK  18

#define I2C_PORT i2c0
#define SDA_PIN 4
#define SCL_PIN 5

// Função para ler temperatura do termopar via SPI (Exemplo com MAX6675)
float read_temperature_spi() {
    uint8_t buffer[2];
    
    // Selecionar o dispositivo SPI
    gpio_put(PIN_CS, 0);
    
    // Ler dois bytes de dados do termopar
    spi_read_blocking(SPI_PORT, 0, buffer, 2);
    
    // Desselecionar o dispositivo
    gpio_put(PIN_CS, 1);
    
    // Converter os bytes recebidos em temperatura
    int16_t temp_raw = (buffer[0] << 8 | buffer[1]) >> 3;  // Descarta os 3 bits menos significativos
    return temp_raw * 0.25; // MAX6675 retorna em incrementos de 0.25°C
}

// Função para ler a temperatura do núcleo da CPU
float read_cpu_temperature() {
    uint16_t adc_raw = adc_read();
    const float ADC_VREF = 3.3;
    const int ADC_MAX = 4095;
    const float TEMP_OFFSET = -50.0f;  // Offset de calibração da temperatura
    const float TEMP_MULTIPLIER = (ADC_VREF / (float)ADC_MAX * 100.0f);
    float voltage = (float)adc_raw * ADC_VREF / (float)ADC_MAX;
    return (voltage - 0.706) / 0.001721 + TEMP_OFFSET;
}

// Função para exibir temperatura no display OLED
void display_temperature(ssd1306_t *oled, float temperature) {
    char buffer[20];
    snprintf(buffer, sizeof(buffer), "Temp: %.2f C", temperature);
    ssd1306_clear(oled);
    ssd1306_draw_string(oled, 0, 0, buffer, 1);
    ssd1306_show(oled);
}

int main() {
    stdio_init_all();
    sleep_ms(2000);  // Espera para inicializar

    // Inicializa a interface SPI
    spi_init(SPI_PORT, 500 * 1000);  // 500kHz
    gpio_set_function(PIN_MISO, GPIO_FUNC_SPI);
    gpio_set_function(PIN_SCK, GPIO_FUNC_SPI);
    gpio_init(PIN_CS);
    gpio_set_dir(PIN_CS, GPIO_OUT);
    gpio_put(PIN_CS, 1);

    // Inicializa o ADC para ler temperatura do núcleo (caso não haja termopar)
    adc_init();
    adc_set_temp_sensor_enabled(true);
    adc_select_input(4);

    // Inicializa a interface I2C e o display OLED
    i2c_init(I2C_PORT, 100 * 1000);  // 100kHz
    gpio_set_function(SDA_PIN, GPIO_FUNC_I2C);
    gpio_set_function(SCL_PIN, GPIO_FUNC_I2C);
    gpio_pull_up(SDA_PIN);
    gpio_pull_up(SCL_PIN);

    ssd1306_t oled;
    ssd1306_init(&oled, 128, 64, I2C_PORT, 0x3C);  // Inicializa o display SSD1306

    // Loop principal para leitura e exibição
    while (1) {
        float temperature;

        // Tente ler do termopar via SPI, se não, usa a temperatura da CPU
        temperature = read_temperature_spi();  // Tenta SPI

        // Se falhar, usa a temperatura do núcleo da CPU
        if (temperature == 0.0) {
            temperature = read_cpu_temperature();
        }

        // Exibe a temperatura no display OLED
        display_temperature(&oled, temperature);

        sleep_ms(1000);  // Atualiza a cada 1 segundo
    }

    return 0;
}
